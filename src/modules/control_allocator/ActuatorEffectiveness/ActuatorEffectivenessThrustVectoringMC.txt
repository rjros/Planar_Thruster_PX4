/****************************************************************************
 *
 *   Copyright (c) 2021-2023 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/
/**
 * @file ActuatorEffectivenessThrustVectoringMC.hpp
 *
 * Actuator effectiveness computed from rotors position and orientation
 * for dynamic allocation
 *
 * @author Ricardo Rosales
 */



#include "ActuatorEffectivenessThrustVectoringMC.hpp"

using namespace matrix;

ActuatorEffectivenessThrustVectoringMC::ActuatorEffectivenessThrustVectoringMC(ModuleParams *parent)
	: ModuleParams(parent),
	  // Thr UAV has two type of rotors
	  // Rotors with a fixed orientation
	  // Rotors with a tilted orientation
	  _mc_rotors_fixed(this, ActuatorEffectivenessRotors::AxisConfiguration::FixedUpwards, true),
	  _mc_rotors_tiltable(this, ActuatorEffectivenessRotors::AxisConfiguration::FixedUpwards, true),
	  _tilts(this)
{
	_rotors_fixed_added_succesfully=false;
	_rotors_tilted_added_succesfully=false;
	_tilts_added_succesfully=false;

	_tilting_type_handle = param_find("CA_ATTITUDE_MODE");
	_servo_count_handle =param_find("CA_SV_TL_COUNT");
	updateParams();
}


void ActuatorEffectivenessThrustVectoringMC::updateParams()
{
	// Check update for:
	//tilt angle, tilting mode, and force mode
	ModuleParams::updateParams();
	//Check current tilting mode
	if(param_get(_tilting_type_handle,&_tilting_type)!=0){
		PX4_ERR("Error in tilting type");
		return;
	}
}


bool
ActuatorEffectivenessThrustVectoringMC::getEffectivenessMatrix(Configuration &configuration,
		EffectivenessUpdateReason external_update)
{
	if (external_update == EffectivenessUpdateReason::NO_EXTERNAL_UPDATE) {
		return false;
	}

	//Fixed Motors Control
	configuration.selected_matrix=0; //< chooses the matrix to be used
	_rotors_fixed_added_succesfully = _mc_rotors_fixed.addActuators(configuration);

	//Tiltable rotors control
	configuration.selected_matrix=1;//< thrust vectoring motors
	_rotors_tilted_added_succesfully=_mc_rotors_tiltable.addActuators(configuration);


	//Allow for yaw motion by differential thrust
	_mc_rotors_fixed.enableYawByDifferentialThrust(!_tilts.hasYawControl());
	// const bool rotors_added_successfully = _mc_rotors_fixed.addActuators(configuration);

	// Tilts
	configuration.selected_matrix=1;
	_first_tilt_idx = configuration.num_actuators_matrix[0];
	_tilts.updateTorqueSign(_mc_rotors_tiltable.geometry());
	_tilts_added_succesfully = _tilts.addActuators(configuration);

	// Set offset such that tilts point upwards when control input == 0 (trim is 0 if min_angle == -max_angle).
	// Note that we don't set configuration.trim here, because in the case of trim == +-1, yaw is always saturated
	// and reduced to 0 with the sequential desaturation method. Instead we add it after.
	_tilt_offsets.setZero();

	for (int i = 0; i < _tilts.count(); ++i) {
		float delta_angle = _tilts.config(i).max_angle - _tilts.config(i).min_angle;

		if (delta_angle > FLT_EPSILON) {
			float trim = -1.f - 2.f * _tilts.config(i).min_angle / delta_angle;
			_tilt_offsets(_first_tilt_idx + i) = trim;
		}
	}

	return (_rotors_tilted_added_succesfully && _rotors_fixed_added_succesfully && _tilts_added_succesfully);
}

void ActuatorEffectivenessThrustVectoringMC::updateSetpoint(const matrix::Vector<float, NUM_AXES> &control_sp,
		int matrix_index, ActuatorVector &actuator_sp, const matrix::Vector<float, NUM_ACTUATORS> &actuator_min,
		const matrix::Vector<float, NUM_ACTUATORS> &actuator_max)
{

	// apply tilt
	if (matrix_index == 1) {
		actuator_controls_s actuator_controls_1;
		if (_actuator_controls_1_sub.copy(&actuator_controls_1)) {
			float control_tilt = actuator_controls_1.control[4] * 2.f - 1.f;

			// set control_tilt to exactly -1 or 1 if close to these end points
			control_tilt = control_tilt < -0.99f ? -1.f : control_tilt;
			control_tilt = control_tilt > 0.99f ? 1.f : control_tilt;

			// initialize _last_tilt_control
			if (!PX4_ISFINITE(_last_tilt_control)) {
				_last_tilt_control = control_tilt;

			} else if (fabsf(control_tilt - _last_tilt_control) > 0.01f) {
				_combined_tilt_updated = true;
				_last_tilt_control = control_tilt;
			}

			for (int i = 0; i < _tilts.count(); ++i) {
				if (_tilts.config(i).tilt_direction == ActuatorEffectivenessTilts::TiltDirection::TowardsFront) {
					actuator_sp(i + _first_tilt_idx) += control_tilt;
				}
			}
		}
	}


}

void ActuatorEffectivenessThrustVectoringMC::getUnallocatedControl(int matrix_index, control_allocator_status_s &status)
{
	// Note: the values '-1', '1' and '0' are just to indicate a negative,
	// positive or no saturation to the rate controller. The actual magnitude is not used.
	if (_yaw_tilt_saturation_flags.tilt_yaw_pos) {
		status.unallocated_torque[2] = 1.f;

	} else if (_yaw_tilt_saturation_flags.tilt_yaw_neg) {
		status.unallocated_torque[2] = -1.f;

	} else {
		status.unallocated_torque[2] = 0.f;
	}
}
